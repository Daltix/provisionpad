- name: To create ec2 instance
  hosts: localhost
  gather_facts: yes
  pre_tasks:
    - name: read SG
      command: "redis-cli get sg_id"
      register: redis_sg
    - name: read subnet ID
      command: "redis-cli get subnet_id"
      register: redis_subnet
    - name: read vpc ID
      command: "redis-cli get vpc_id"
      register: redis_vpc
    - name: set VPC facts
      set_fact:
        public_sg_id:     "{{ redis_sg.stdout }}"
        public_subnet_id: "{{ redis_subnet.stdout }}"
        vpc_id:           "{{ redis_vpc.stdout }}"
        aws_access_key:   "{{ lookup('env','aws_access_key_id') }}"
        aws_secret_key:   "{{ lookup('env','aws_secret_access_key') }}"
        your_name:        "{{ lookup('env','your_name') }}"
        your_email:       "{{ lookup('env','your_email') }}"
        aws_region:       "{{ lookup('env','aws_region') }}"
        aws_ami:          "{{ lookup('env','aws_ami') }}"
        aws_iam_role:     "{{ lookup('env','iam_role') }}"
        repository_home:  "{{ lookup('env', 'repo_home_dir') }}"
  vars:
    keypair: "test_amir"
    instance_type: "t2.micro"
    # volume_size: 10
  tasks:
    - name: Create ec2 instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        key_name: "{{ keypair }}"
        instance_type: "{{ instance_type }}"
        group_id: "{{ public_sg_id }}"
        image: "{{ aws_ami }}"
        wait: true
        region: "{{ aws_region }}"
        exact_count: 1 
        instance_profile_name: "{{ aws_iam_role }}" # the role for the ec2 instances
        instance_initiated_shutdown_behavior: terminate
        # The following commented for next modifications
        # volumes:
        # - device_name: /dev/xvda
        #   volume_type: gp2
        #   volume_size: "{{ volume_size }}"
        #   delete_on_termination: yes
        count_tag:
          Name: "Amir"
        instance_tags:
          Name: "{{ your_name  }}"
        vpc_subnet_id: "{{ public_subnet_id }}"        
        assign_public_ip: yes # yes: only available with vpc_subnet_id
      register: ec2instance

    - name: get instance name
      command: python {{ repository_home }}/pythonscripts/boxno.py
      register: boxno

    - name: set ec2 facts
      set_fact:
        ec2_id: "{{ ec2instance.instance_ids[0] }}"
        ec2_name:      "{{ boxno.stdout }}"
        ec2_public_ip: "{{ ec2instance.instances[0].public_ip }}"

    - name: Add to ssh config
      blockinfile:
        path: '/home/sandbox/.ssh/config'
        create: yes
        marker: "## {mark} intsnace {{ ec2_name }}"
        block: |
          Host {{ ec2_name }}
            HostName {{ ec2_public_ip }}
            User ubuntu
            IdentityFile /home/sandbox/.ssh/test_amir.pem
            ForwardAgent yes

    - name: Add to ansible inventory
      blockinfile:
        path: '/home/sandbox/env_variables/inventory'
        create: yes
        marker: "## {mark} intsnace {{ ec2_name }}"
        block: |
          {{ ec2_name }} ansible_ssh_host={{ ec2_public_ip }} ansible_user=ubuntu ansible_ssh_private_key=/home/sandbox/.ssh/test_amir.pem

    - name: add to redis running instances
      command: "{{ item }}"
      with_items:
        - "redis-cli sadd running_instances {{ ec2_name }}"
        - "redis-cli rpush {{ ec2_name }} {{ ec2_id }}"
        - "redis-cli rpush {{ ec2_name }} {{ ec2_public_ip }}"
        - "redis-cli rpush {{ ec2_name }} {{ aws_region }}"
    
    




    















